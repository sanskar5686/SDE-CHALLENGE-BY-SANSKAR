// 1st approach 
// Where the return type is vector<pair<int,int>>

#include <bits/stdc++.h> 
/*

    intervals[i][0] = start point of i'th interval
    intervals[i][1] = finish point of i'th interval

*/

vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{
    // Write your code here.
    vector<vector<int>> ans;
    int n = intervals.size();
    for(int i=0;i<n;i++){
        int start = intervals[i].first, end =intervals[i].second;
        if(!ans.empty()){
            if(ans.back().second >= start){
                continue;
            }
        }
        for(int j=i+1;j<n;j++){
            if( intervals[j].first <= end){
                end = intervals[j].second;
            }
        }
        ans.push_back(start,end);
    }
    return ans;
}

// 2nd approach 
// Where the return type is vector<vector<int>>
#include <bits/stdc++.h> 
/*

    intervals[i][0] = start point of i'th interval
    intervals[i][1] = finish point of i'th interval

*/

vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{
    // Write your code here.
//     vector<vector<int>> ans;
//     int n = intervals.size();
//     for(int i=0;i<n;i++){
//         int start = intervals[i].first, end =intervals[i].second;
//         if(!ans.empty()){
//             if(ans.back().second >= start){
//                 continue;
//             }
//         }
//         for(int j=i+1;j<n;j++){
//             if( intervals[j].first <= end){
//                 end = intervals[j].second;
//             }
//         }
//         ans.push_back(start,end);
//     }
//     return ans;
    vector<vector<int>> ans;
    int n = intervals.size();
    sort(intervals.begin(), intervals.end());
    if(intervals.size() == 0){
        return ans;
    }
     if(intervals.size() == 1){
         ans.push_back(intervals[0]);
         return ans;
    }
     ans.push_back(intervals[0]);
    for(int i=1;i<n;i++){
         vector<int> &last = ans.back();
        if(last[1] < intervals[i][0]){
            ans.push_back(intervals[i]);
        }
        else{
            last[1]= max(last[1], intervals[i][1]);
        }
    }
    return ans;
}
